<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title>HCode Blog</title>
        <link>https://your-docusaurus-test-site.com/HCode/</link>
        <description>HCode Blog</description>
        <lastBuildDate>Wed, 21 Dec 2022 00:00:00 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>https://github.com/jpmonette/feed</generator>
        <language>en</language>
        <item>
            <title><![CDATA[實習面試心得 - 群暉]]></title>
            <link>https://your-docusaurus-test-site.com/HCode/interview-synology-intern</link>
            <guid>interview-synology-intern</guid>
            <pubDate>Wed, 21 Dec 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[Introduction]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h2><p><img loading="lazy" src="https://images.unsplash.com/photo-1565728744382-61accd4aa148?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8OHx8aW50ZXJ2aWV3fGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;q=60" class="img_ev3q">
今天要來分享群暉實習的面試！
作為大三第一間面試的公司
這篇文章會先介紹背景跟建議準備方向
最後再進到面試的 QA 環節！</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="背景">背景<a class="hash-link" href="#背景" title="Direct link to heading">​</a></h2><p>今天應徵的是 Software Engineer In Test(intern)。
那官網上要求的如下</p><ul><li>Currently enrolled in an undergraduate or master’s program</li><li>Ability to commute to Synology's office in Banqiao for at least 24 hours per week or during epidemic prevention periods, to follow remote work policies</li><li>Proficiency in Python or C++</li><li>Familiarity with Unix/Linux</li><li>Familiarity with Git</li><li>Experience with JavaScript, CSS/HTML</li></ul><p>目前是就讀台大資工系大三，在這之前沒有正式的軟體公司實習經驗！
但是有擔任過研究助理(感覺加分不大，所以就算沒經驗也不要放棄！)。
除此之外再加上一個全端的 side project。</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="建議準備方向">建議準備方向<a class="hash-link" href="#建議準備方向" title="Direct link to heading">​</a></h2><ul class="contains-task-list containsTaskList_mC6p"><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->OS 相關，不過不用太深，知道 thread,process 大概就 Ok</li><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->履歷細節，要知道自己寫在履歷上的東西到底是什麼(等等會舉例)</li><li class="task-list-item"><input type="checkbox" disabled=""> <!-- -->針對職位的相關常識</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="面試過程">面試過程<a class="hash-link" href="#面試過程" title="Direct link to heading">​</a></h2><p>在問答的過程中，面試官很常基於你的答案在做延伸
這種問題前面會加上<!-- -->[加問]<!-- -->
底下我的回答是當下的回答
不一定是正確答案！</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="第一位面試官">第一位面試官<a class="hash-link" href="#第一位面試官" title="Direct link to heading">​</a></h4><ol><li><p>可以跟我說說看 thread 跟 process 嗎?</p><blockquote><p>:我們寫的程式在執行前就只是一般的文件，那執行的過程中就稱為 process，那 process 會有一些屬性像是 id，由誰生出來的等等。那 thread 的話是同一個 process 中生出來的，通常是為了幫助我們提高效率，而且因為是同個 process 所以有共享不少資源，方便但也需要小心。用人比喻的話 process 就像是不同的人，thread 就像同一個人開分身。</p></blockquote></li><li><p>[加問]<!-- --> 你剛才提到共享資源，可以說說看 thread 共享了什麼嗎</p><blockquote><p>: 蠻多的ㄟ XD，像是變數跟 file descriptor 等等。</p></blockquote></li><li><p>我有看到你在履歷上有 docker 的經驗，可以說說看 docker 跟 VM 的差別嗎？</p><blockquote><p>: docker 蠻像讓 container 藉由 docker 跟你的 OS 互動，但 VM 就是直接在你的 OS 上再蓋一層 OS，比較消耗資源。</p></blockquote></li><li><p>有使用了什麼 docker 的功能</p><blockquote><p>: 只有用 docker 開 database 跟把 server 打包成 container 而已 XD。</p></blockquote></li><li><p>可以說說看 Restful API 是什麼嗎</p><blockquote><p>: Restful API 是一種 stateless 的 API，代表我們每次的 request 都跟先前的無關，只跟當前這個 request 以及他附帶的 value 像 token 有關。</p></blockquote></li><li><p>[加問]<!-- --> 這樣做的好處是什麼？</p><blockquote><p>: 我不確定，但如果我們還要考慮先前的情況或許會變得很複雜？</p></blockquote></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="coding-interview">Coding interview<a class="hash-link" href="#coding-interview" title="Direct link to heading">​</a></h3><p>使用的是他們自己的 doc，蠻像 google doc 的，酷<br>
<!-- -->語言的話可以自由選擇</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="palindrome">palindrome<a class="hash-link" href="#palindrome" title="Direct link to heading">​</a></h4><p>給定一個字串，判斷他是不是回文
蠻經典的簡單題目，就不多說了 XD。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="remove-one-palindrome">Remove one Palindrome<a class="hash-link" href="#remove-one-palindrome" title="Direct link to heading">​</a></h4><p>上題寫完之後的進階題，這次一樣給定一個字串，那這次最多可以移除一個字元後判斷他是不是回文
當下心裡慌得一批，感覺我會寫的很髒，就跟他說讓我想想。
但想想後發現跟上題很類似，上題是由外而內，如果遇到一個不一樣的就可以回傳 false。
但這題可以移除一個，所以一樣由外而內，如果遇到不一樣的
就回傳 isPalindrome(移除前面字元後的 substring) || isPalindrome(移除後面字元後的 substring)
如果兩個之中有一個是那就是，否則這個 string 至少要移除兩個以上才可能是 palindrome。</p><p>解完之後就休息 20 分鐘讓面試官討論</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="第二位面試官">第二位面試官<a class="hash-link" href="#第二位面試官" title="Direct link to heading">​</a></h4><p>第二個面試官問題比較像在考其他方面的常識，但我的常識蠻少的所以這關回答得不太 ok qq。</p><ol><li><p>說明 Javascript 中的 Promise</p><blockquote><p>: Promise 是 Javascript 非同步一個很重要的機制。例如我今天想吃晚餐，我可能會點外送，但點了外送後不是我親自去領而是交給別人，這段時間我去做其他事，
但是交給別人做的話我就沒辦法確定這件事什麼時候會做好，所以通常會提供一個 resolve 跟 reject 來告訴他成功或失敗後要做的事情。
這種情況下的 resolve(成功)可能會是打電話給我，讓我可以去領餐點。reject(失敗)可能是退款給我。</p></blockquote></li><li><p>[加問]<!-- --> 你剛才有提到這段時間去做其他事，有沒有辦法等到他回來再做事？</p><blockquote><p>: 可以，這時候需要使用 await，那 await 要在 async function 中才能使用，他會在那行等到某個 promises 被 fulfill 或 reject。</p></blockquote></li><li><p>你知道什麼是 DDoS 嗎？</p><blockquote><p>: 不確定 XD，但我猜是駭客使用多台被感染的電腦像某個主機發送大量請求？</p></blockquote></li><li><p>[加問]<!-- --> 那該如何防禦呢？</p><blockquote><p>: (心裡:窩不ㄗ道)我不清楚，可能是 ban 掉某些特定 ip?</p></blockquote></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="coding-interview-1">coding interview<a class="hash-link" href="#coding-interview-1" title="Direct link to heading">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pattern-matching">Pattern matching<a class="hash-link" href="#pattern-matching" title="Direct link to heading">​</a></h4><p>給你一個 words 跟一個 pattern，問這個 words 符不符合 pattern。<br>
<!-- -->例如 words= dog cat cat dog，pattern = abba
符合，因為可以把 a 當成 dog，b 當成 cat 這樣。
沒有太多懸念，直接用 unordered_map 通通記起來 XD</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="第三位面試官">第三位面試官<a class="hash-link" href="#第三位面試官" title="Direct link to heading">​</a></h4><p>第三位面試官是人資，
大概會問你你之前做些的事，
大概什麼時候會想開始上班，
主要是詢問你的履歷的細節。
最後會詢問你在這些做過的事中扮演什麼角色，
有沒有什麼特質讓你覺得自己適合這份工作。</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="第四位面試官-主管">第四位面試官 主管<a class="hash-link" href="#第四位面試官-主管" title="Direct link to heading">​</a></h4><p>簡單介紹一下公司後就開始 technical question
說明一下 relational database</p><ol><li><p>為什麼需要 database 而不是將每筆資料存成檔案就好</p><blockquote><p>我其實有想過這個問題但沒有深究，或許是 database 的一些資料結構可以給我們更好的存取效率與方式？</p></blockquote></li><li><p>c++ virtual</p><blockquote><p>我有在學校作業用過這個東西 XD，這個 keyword 可以讓繼承他的 class 可以 override 這個函數，但不一定要 override</p></blockquote></li><li><p>[加問]<!-- -->c++ pure virtual</p><blockquote><p>我不確定ㄟ，但從名字我猜是強迫子類實作的函數，可能用在抽象函式上？
主管：你很會猜:)</p></blockquote></li><li><p>c++ move</p><blockquote><p>我不確定，但我記得跟 left value,right value 有關？</p></blockquote></li><li><p>多態</p><blockquote><p>我覺得這個概念蠻有趣的，就像一台車子不管她使用什麼材料當能源，都是用煞車方向盤油門等等來操控，很多個類別都提供差不多的介面</p></blockquote></li><li><p>你可以簡單描述一下用戶登入的過程嗎</p><blockquote><p>要到多細？從前端打字開始嗎 XD?
主管：可以
在用戶打完帳號密碼之後會先查看這個帳號是否存在，不存在或許可以回傳一個 404，存在的話再把他打的密碼 hash 過後跟資料庫內的比對，一樣的話就算登入成功，或許會在他身上留個 cookie 或 JWT</p></blockquote></li><li><p>輸入網址到畫面出現中間的過程</p><blockquote><p>在打網址之後會先透過 DNS 將網址轉換成 ip，並建立 tcp 連線(後來發現 HTTP3.0 好像不是 TCP 0.0)，建立連線後會要求需要的檔案如 html css js,那最後 html 會經過 DOM tree 渲染在畫面上</p></blockquote></li><li><p>testing 的相關經驗以及為什麼想應徵 testing</p><blockquote><p>其實沒有太多，只有寫過幾次 unit testing 跟 e2e 跟 mock database，但覺得這個技能很實用，可以確保寫出來的程式碼有一定的品質
<!-- -->[加問]<!-- --> 你剛才提到 mocking database，可以跟我解釋一下嗎
我們在測試一個需要資料庫的功能時會提供一個假的資料庫，否則出問題無法確定是資料庫出問題還是功能出問題</p></blockquote></li><li><p>開發的框架與語言選擇？</p><blockquote><p>語言的話是使用 Typescript，原因的話是 js 在開發中大型的程式時容易因為 type 發生問題，你無法確定傳進來的東西到底是什麼，access 到 undefined 跟 null 就會 RE，
主管：那如果隊友全部都寫 any 呢？
笑死 這個情況已經遇過了 我也罵過了</p></blockquote></li><li><p>HTTP1.0 2.0 3.0 的差別 你使用的框架是哪種？</p><blockquote><p>我不確定，目前剛好在教，但我猜大概是 2 或 3? 因為 1 太爛了 XD</p></blockquote></li></ol><p>最後：我這邊問完了 還有沒有什麼問題？
沒有的話你錄取了
我：虫合
然後簡單說一下進公司後要做的事情就結束了</p><p>心得</p><p>面試官人都很好
即使答不上來也不會讓你覺得完蛋了 XD</p><p>coding interview 不會太難
個人認爲偏簡單(超級加分,自己私心認為大部分的資結算法平常都不會用到很深)
整體體驗非常舒服 期待菜雞我的實習生活 qq</p>]]></content:encoded>
            <category>interview</category>
        </item>
        <item>
            <title><![CDATA[快速架設MongoDB]]></title>
            <link>https://your-docusaurus-test-site.com/HCode/docker-mongo</link>
            <guid>docker-mongo</guid>
            <pubDate>Fri, 16 Sep 2022 00:00:00 GMT</pubDate>
            <description><![CDATA[前言]]></description>
            <content:encoded><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="前言">前言<a class="hash-link" href="#前言" title="Direct link to heading">​</a></h2><p>在很多時候會想要快速setup一個可以用的database例如mongoDB或是postgreSQL，但手邊的環境不一定有而且又懶得下載或使用雲服務時，就很適合使用docker快速setup!
<img loading="lazy" src="https://images.unsplash.com/photo-1605745341112-85968b19335b?ixlib=rb-4.0.3&amp;ixid=MnwxMjA3fDB8MHxzZWFyY2h8MXx8ZG9ja2VyfGVufDB8fDB8fA%3D%3D&amp;auto=format&amp;fit=crop&amp;q=60" class="img_ev3q"></p><p>選擇docker的原因</p><ul><li><p>輕巧且方便</p></li><li><p>可以有一致性，相同的設定下你可以保證環境是一致的</p></li><li><p>刪除時非常簡單，把容器刪掉就完事了！</p></li></ul><p>介紹完原因後 本篇只介紹MongoDB方面，未來若有機會再寫其他database的qq</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="要求">要求<a class="hash-link" href="#要求" title="Direct link to heading">​</a></h4><ul><li><p>已經下載docker！</p></li><li><p>最好有使用過mongoDB！</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="使用container">使用container<a class="hash-link" href="#使用container" title="Direct link to heading">​</a></h2><p>先從最基本的方式開始！</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run --name db mongo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>這樣會執行一個最新版本的mongodb，並命名容器為db(可以自取)方便管理</p><p>(若之前並未下載過 mongodb的映像檔, <code>docker run</code> 也會自動幫你下載)</p><p>但是這個指令還有很多東西可以再進步</p><p>例如我們其實多數不需要使用terminal與 db server互動</p><p>因此可以用<code>-d</code>來表達detached，使那個container變為background process 。</p><p>除此之外，我們也可以標記特定版本的mongoDB而非自動使用最新版</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run --name db -d mongo:4.1</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>(以背景程式執行4.1版本的mongoDB)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="調配port">調配port<a class="hash-link" href="#調配port" title="Direct link to heading">​</a></h3><p>到現在我們其實還忽略了一個很嚴重的問題，我們該怎麼存取這個server，mongoDB雖然是在27017 port上，但是他所在的port是container裡的27017而非本機上的27017，因此其他在本機上的app無法存取，因此我們還需要使用<code>-p</code>配置一個port給他</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run --name db -d -p </span><span class="token number" style="color:#36acaa">27017</span><span class="token plain">:27017 mongo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>(將本機的27017連結container裡的27017)</p><p>這時候若有下載mongo compass就可以連上去看看有沒有東東了！</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="保存資料">保存資料！<a class="hash-link" href="#保存資料" title="Direct link to heading">​</a></h3><p>在前面有說到，要刪除是非常簡單的，因為我們是透過容器來創建，因此只要刪除容器裡面的資料也會跟著一起刪除，但如果我想保存這些資料呢？這時候就可以使用<code>-v</code>將選定的資料夾掛載到本機的檔案系統上！</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run --name db -d -p </span><span class="token number" style="color:#36acaa">27017</span><span class="token plain">:27017 -v </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">path to </span><span class="token builtin class-name">local</span><span class="token plain"> dir</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain">:/data/db mongo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>(將container內的/data/db掛載到指定的path中)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="環境變數">環境變數<a class="hash-link" href="#環境變數" title="Direct link to heading">​</a></h3><p>如果我們想要設定root user 也可以透過環境變數<code>-e</code>的方式設定，當然也有其他設定方式，不過那應該是之後的事ㄌㄅ0.0</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">docker</span><span class="token plain"> run --name db -d -p </span><span class="token number" style="color:#36acaa">27017</span><span class="token plain">:27017 </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-e </span><span class="token assign-left variable" style="color:#36acaa">MONGO_INITDB_ROOT_USERNAME</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">hcc </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">-e </span><span class="token assign-left variable" style="color:#36acaa">MONGO_INITDB_ROOT_PASSWORD</span><span class="token operator" style="color:#393A34">=</span><span class="token number" style="color:#36acaa">2771</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">\</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">mongo</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="end">end<a class="hash-link" href="#end" title="Direct link to heading">​</a></h2><p>這篇大概就到這邊了，因為摸索到這邊已經夠我使用一陣子了，不過還有看到一些進階的像是docker network,compose等等，有機會使用到的話再回頭更新ㄅ</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="相關資源">相關資源<a class="hash-link" href="#相關資源" title="Direct link to heading">​</a></h3><p><a href="https://www.mongodb.com/compatibility/docker" target="_blank" rel="noopener noreferrer">官方教學</a></p>]]></content:encoded>
            <category>docker</category>
            <category>mongoDB</category>
        </item>
    </channel>
</rss>